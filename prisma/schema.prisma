generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  password           String?
  email              String         @unique
  firstName          String
  lastName           String
  admin              Boolean        @default(false)
  passwordResetAt    DateTime?
  passwordResetToken String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  flights            flight[]       @relation("UserFlights")
  flightsAdded       flight[]       @relation("UserFlightsAdded")
  itineraries        itinerary[]
  notification       notification[]
  trips              trip[]
  followedBy         user[]         @relation("UserFollows")
  following          user[]         @relation("UserFollows")

  @@index([username])
}

model trip {
  id        String    @id @default(uuid()) @db.Uuid
  userId    Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  outTime   DateTime
  inTime    DateTime
  flights   flight[]
  user      user      @relation(fields: [userId], references: [id])
}

model itinerary {
  id        String             @id @default(uuid()) @db.Uuid
  createdAt DateTime           @default(now())
  updatedAt DateTime?          @updatedAt
  userId    Int?
  name      String
  user      user?              @relation(fields: [userId], references: [id])
  flights   itinerary_flight[]
}

model itinerary_flight {
  id                 String         @id @default(uuid()) @db.Uuid
  itineraryId        String         @db.Uuid
  departureAirportId String
  arrivalAirportId   String
  airlineId          String?
  operatorAirlineId  String?
  flightNumber       Int?
  aircraftTypeId     String?
  outTime            DateTime
  offTime            DateTime?
  onTime             DateTime?
  inTime             DateTime
  duration           Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  aircraftType       aircraft_type? @relation(fields: [aircraftTypeId], references: [id])
  airline            airline?       @relation("itineraryFlights", fields: [airlineId], references: [id])
  arrivalAirport     airport        @relation("arrivalItineraryFlights", fields: [arrivalAirportId], references: [id])
  departureAirport   airport        @relation("departureItineraryFlights", fields: [departureAirportId], references: [id])
  itinerary          itinerary      @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  operatorAirline    airline?       @relation("operatorItineraryFlights", fields: [operatorAirlineId], references: [id])
}

model flight {
  id                 String         @id @default(uuid()) @db.Uuid
  userId             Int
  addedByUserId      Int?
  tripId             String?        @db.Uuid
  departureAirportId String
  arrivalAirportId   String
  airlineId          String?
  operatorAirlineId  String?
  flightNumber       Int?
  callsign           String?
  aircraftTypeId     String?
  tailNumber         String?
  class              FlightClass?
  seatNumber         String?
  seatPosition       SeatPosition?
  reason             FlightReason?
  comments           String?
  trackingLink       String?
  duration           Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  outTime            DateTime
  offTime            DateTime?
  onTime             DateTime?
  inTime             DateTime
  airframeId         String?
  inTimeActual       DateTime?
  offTimeActual      DateTime?
  onTimeActual       DateTime?
  outTimeActual      DateTime?
  arrivalBaggage     String?
  arrivalGate        String?
  arrivalTerminal    String?
  departureGate      String?
  departureTerminal  String?
  aircraftType       aircraft_type? @relation(fields: [aircraftTypeId], references: [id])
  airframe           airframe?      @relation(fields: [airframeId], references: [icao24])
  airline            airline?       @relation("flights", fields: [airlineId], references: [id])
  arrivalAirport     airport        @relation("arrivalFlights", fields: [arrivalAirportId], references: [id])
  departureAirport   airport        @relation("departureFlights", fields: [departureAirportId], references: [id])
  operatorAirline    airline?       @relation("operatorFlights", fields: [operatorAirlineId], references: [id])
  trip               trip?          @relation(fields: [tripId], references: [id])
  user               user           @relation("UserFlights", fields: [userId], references: [id])
  addedByUser        user?          @relation("UserFlightsAdded", fields: [addedByUserId], references: [id])

  @@index([outTime, inTime])
}

model manufacturer {
  code      String     @id
  name      String
  airframes airframe[]
}

model airframe {
  icao24               String         @id
  registration         String
  manufacturerCode     String
  model                String?
  typeCode             String?
  serialNumber         String?
  lineNumber           String?
  icaoAircraftType     String?
  operatorId           String?
  owner                String?
  testReg              String?
  registrationDate     DateTime?      @db.Date
  registrationExprDate DateTime?      @db.Date
  builtDate            DateTime?      @db.Date
  engines              String?
  aircraftTypeId       String?
  aircraftType         aircraft_type? @relation(fields: [aircraftTypeId], references: [id])
  manufacturer         manufacturer   @relation(fields: [manufacturerCode], references: [code])
  operator             airline?       @relation(fields: [operatorId], references: [id])
  flights              flight[]
}

model aircraft_type {
  id               String             @id
  iata             String
  icao             String
  name             String
  class            String
  airframes        airframe[]
  flights          flight[]
  itineraryFlights itinerary_flight[]
}

model airline {
  id                       String             @id
  iata                     String?
  icao                     String
  name                     String
  callsign                 String?
  fleetSize                Int?
  destinations             Int?
  logo                     String?
  wiki                     String?
  flightStatsCode          String?
  airframes                airframe[]
  flights                  flight[]           @relation("flights")
  operatorFlights          flight[]           @relation("operatorFlights")
  itineraryFlights         itinerary_flight[] @relation("itineraryFlights")
  operatorItineraryFlights itinerary_flight[] @relation("operatorItineraryFlights")
}

model airport {
  id                        String             @id
  type                      String
  name                      String
  lat                       Float
  lon                       Float
  elevation                 Int?
  continent                 String
  countryId                 String
  regionId                  String
  municipality              String
  timeZone                  String
  scheduledService          Boolean
  ident                     String
  gps                       String
  iata                      String
  local                     String
  country                   country            @relation(fields: [countryId], references: [id])
  region                    region             @relation(fields: [regionId], references: [id])
  arrivalFlights            flight[]           @relation("arrivalFlights")
  departureFlights          flight[]           @relation("departureFlights")
  arrivalItineraryFlights   itinerary_flight[] @relation("arrivalItineraryFlights")
  departureItineraryFlights itinerary_flight[] @relation("departureItineraryFlights")
}

model country {
  id        String    @id
  name      String
  continent String
  wiki      String?
  airports  airport[]
  regions   region[]
}

model region {
  id        String    @id
  name      String
  continent String
  countryId String
  wiki      String?
  airports  airport[]
  country   country   @relation(fields: [countryId], references: [id])
}

model notification {
  id              String              @id @db.Uuid
  userId          Int
  showDefault     Boolean
  color           NotificationColor?
  title           String
  description     String?
  expiration      DateTime?
  primaryAction   NotificationAction?
  secondaryAction NotificationAction?
  user            user                @relation(fields: [userId], references: [id])
}

enum FlightClass {
  BASIC
  ECONOMY
  PREMIUM
  BUSINESS
  FIRST
}

enum SeatPosition {
  AISLE
  MIDDLE
  WINDOW
}

enum FlightReason {
  LEISURE
  BUSINESS
  CREW
}

enum NotificationAction {
  DISMISS
}

enum NotificationColor {
  INFO
  SUCCESS
  WARNING
  ERROR
}
